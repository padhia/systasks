{% from 'util.jinja2' import date_range %}

{% macro domain_sql(colname) -%}
        WITH D AS (
            SELECT QueryID
                , (AMPCPUTime + ParserCPUTime) as SUMCPUTime
                , Department
                , SubDepartment AS BusinessGroup
                , {{ dbc.logdt }} AS LogDate
            FROM {{ dbc.log }} DBQL
            JOIN ca_user_xref U ON DBQL.username = U.username
            WHERE LogDate {{ date_range() }}
          )
        , O AS (
            SELECT QueryId
                , DatabaseName
                , TableName
                , DataDomain
                , SubjectArea
                , {{ dbc.logdt }} AS LogDate
            FROM {{ dbc.obj }}
            JOIN ca_table_xref ON ObjectDatabaseName = DatabaseName AND ObjectTableName = Tablename
            WHERE LogDate {{ date_range() }}
              AND ObjectType = 'Tab'
          )
        , A AS (
            SELECT QueryID
                , COUNT(DISTINCT DataDomain) DataDomainCNT
                , COUNT(DISTINCT SubjectArea) SubjectAreaCNT
            FROM O
            GROUP BY 1
          )
        SELECT SUM(CPUTime)
            , {{ colname }}
            , DataDomain
        FROM (
            SELECT D.QueryID
                , D.SUMCPUTime/A.DataDomainCNT AS CPUTime
                , {{ colname }}
                , DataDomain
            FROM D
            JOIN O ON D.QueryID = O.QueryID AND D.Logdate = O.Logdate
            JOIN A ON A.QueryID = D.QueryID
            GROUP BY 1,2,3,4
          ) as F
        GROUP BY 2,3
{%- endmacro %}

description: >
  Provide a business centric view of resources consumed within the Data Warehouse.
  For more information see: https://teradata.sharepoint.com/:w:/r/teams/SalesTechnologyExchangeSTX/Shared%20Documents/@STX_0400_Consumption%20Analytics/Business%20Usage%20Decoded%20(Who%20%26%20What%20Data)/Consumption%20Analytics%20Guide%20v0.1.docx?d=weaeca6a8ce1c4740b59bf752adda5354&csf=1&web=1&e=hswQew

tasks:
- name: create database+table and data domain+subject area xref table
  connect: source
  execute:
    sql: |
      CREATE VOLATILE MULTISET TABLE ca_table_xref
      (
        DataDomain   VARCHAR(255) CHARACTER SET LATIN NOT CASESPECIFIC,
        SubjectArea  VARCHAR(255) CHARACTER SET LATIN NOT CASESPECIFIC,
        DatabaseName VARCHAR(128) CHARACTER SET UNICODE NOT CASESPECIFIC NOT NULL,
        TableName    VARCHAR(128) CHARACTER SET UNICODE NOT CASESPECIFIC NOT NULL
      ) PRIMARY INDEX ( DatabaseName ,TableName )
      ON COMMIT PRESERVE ROWS

{% include "load_table_xref.jinja2" %}

- name: create user and dept+subdept+region xref table
  connect: source
  execute:
    sql: |
      CREATE VOLATILE MULTISET TABLE ca_user_xref
      (
        Username      VARCHAR(128) CHARACTER SET UNICODE NOT CASESPECIFIC NOT NULL,
        Department    VARCHAR(255) CHARACTER SET LATIN   NOT CASESPECIFIC,
        SubDepartment VARCHAR(255) CHARACTER SET LATIN   NOT CASESPECIFIC,
        Region        VARCHAR(255) CHARACTER SET LATIN   NOT CASESPECIFIC
      ) PRIMARY INDEX (Username) ON COMMIT PRESERVE ROWS

{% include "load_user_xref.jinja2" %}

- name: Business group domain CPU consumption
  connect: source
  export:
    file: BusGrpDataDomainCPUConsumption.csv
    sql: |
      {{ domain_sql('BusinessGroup') }}

- name: Department CPU consumption
  connect: source
  export:
    file: DepartmentCPUConsumption.csv
    sql: |
      SELECT CAST({{ dbc.logdate('D') }} AS FORMAT 'YYYY-MM-DD') AS LogDate
          , StatementType
          , CASE StatementType
                WHEN 'Merge Into'         THEN 'Ingest & Prep'
                WHEN 'Begin Loading'      THEN 'Ingest & Prep'
                WHEN 'Mload'              THEN 'Ingest & Prep'
                WHEN 'Collect Statistics' THEN 'Data Maintenance'
                WHEN 'Delete'             THEN 'Ingest & Prep'
                WHEN 'End Loading'        THEN 'Ingest & Prep'
                WHEN 'Begin Delete Mload' THEN 'Ingest & Prep'
                WHEN 'Update'             THEN 'Ingest & Prep'
                WHEN 'Select'             THEN 'Answers'
                WHEN 'Exec'               THEN 'Ingest & Prep'
                WHEN 'Release Mload'      THEN 'Ingest & Prep'
                WHEN 'Insert'             THEN 'Ingest & Prep'
                WHEN 'Begin Mload'        THEN 'Ingest & Prep'
                WHEN 'Execute Mload'      THEN 'Ingest & Prep'
                WHEN 'Commit Work'        THEN 'Ingest & Prep'
                                          ELSE 'System/Procedural'
            END AS StatementOutcome
          , UPPER(U.Department) as Department
          , UPPER(U.SubDepartment) as BusinessGroup
          , SUM(D.AMPCPUTime + D.ParserCPUTime) (BIGINT) as SUMCPUTime
          , COUNT(*) as QueryCount

      FROM {{ dbc.log }} D
      JOIN ca_user_xref U ON D.UserName = U.UserName

      WHERE LogDate {{ date_range() }}
      GROUP BY 1,2,3,4,5

- name: Department data domain CPU consumption
  connect: source
  export:
    file: DeptDataDomainCPUConsumption.csv
    sql: |
      {{ domain_sql('Department') }}

- name: Size of objects by Domain and Subject area
  connect: source
  export:
    file: SpaceByDomainSubject.csv
    sql: |
      SELECT SUM(CurrentPerm)/1024/1024/1024 AS "CurrentPerm in GB"
          , DataDomain
          , SubjectArea
      FROM DBC.TableSize D
      JOIN ca_table_xref T ON D.DatabaseName = T.DatabaseName AND D.TableName = T.TableName
      GROUP BY 2,3

- name: Top CPU consumers
  connect: source
  export:
    file: TopCPUUsers.csv
    sql: |
      SELECT ROW_NUMBER() OVER(ORDER BY CPUTime DESC)
          , SUM(AMPCPUTime + ParserCPUTime) as CPUTime
          , D.Username
          , UPPER(C.Department)
          , UPPER(C.SubDepartment) as BusinessGroup

      FROM {{ dbc.log }} D
      JOIN ca_user_xref C ON d.username = c.username

      WHERE {{ dbc.logdate('D') }} {{ date_range() }}
      GROUP BY 3,4,5
      ORDER BY 1 ASC
